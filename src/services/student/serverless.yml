service: abiliyo-student-service

provider:
  name: aws
  runtime: nodejs12.x
  profile: backend
  memorySize: 1024
  # timeout: 10

  apiGateway:
    minimumCompressionSize: 1024

  stage: dev
  region: ap-south-1

  environment:
    INSTRUCTOR_TABLE: ${file(../database/serverless.yml):custom.instructorTableName}
    STUDENT_TABLE: ${file(../database/serverless.yml):custom.studentTableName}
    CLASS_TABLE: ${file(../database/serverless.yml):custom.classTableName}
    SESSION_TABLE: ${file(../database/serverless.yml):custom.sessionTableName}
    DEMO_TABLE: ${file(../database/serverless.yml):custom.demoTableName}
    HOMEWORK_TABLE: ${file(../database/serverless.yml):custom.homeworkTableName}
    INSTRUCTOR_BUCKET: ${file(../upload/serverless.yml):custom.instructorBucketName}
    STUDENT_BUCKET: ${file(../upload/serverless.yml):custom.studentBucketName}
    CLASS_BUCKET: ${file(../upload/serverless.yml):custom.classBucketName}
    HOMEWORK_BUCKET: ${file(../upload/serverless.yml):custom.homeworkBucketName}
    JWT_SECRET: ${env:JWT_SECRET}
    JWT_EXPIRATION_TIME: ${env:JWT_EXPIRATION_TIME}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
      Resource: "*"

package:
  individually: true

plugins:
  - serverless-webpack
  - serverless-domain-manager
  - serverless-dotenv-plugin
  - serverless-offline

custom:
  domains:
    prod: api.abiliyo.com
    staging: staging-api.abiliyo.com
    dev: dev-api.abiliyo.com

  dotenv:
    path: ../../.env

  customDomain:
    domainName: ${self:custom.domains.${self:provider.stage}}
    stage: ${self:provider.stage}
    basePath: "student"
    certificateName: "*.abiliyo.com"
    createRoute53Record: true
    endpointType: "edge"
    securityPolicy: tls_1_2
    apiType: rest

  webpack:
    webpackConfig: ./webpack.config.js

functions:
  authStudent:
    handler: src/auth.handler

  registerStudent:
    handler: src/register.handler
    events:
      - http:
          path: register
          method: POST
          cors: true
  loginStudent:
    handler: src/login.handler
    events:
      - http:
          path: login
          method: POST
          cors: true
  getStudent:
    handler: src/get.handler
    events:
      - http:
          path: get
          method: GET
          authorizer:
            name: authStudent
            resultTtlInSeconds: 0
          cors: true
  updateStudent:
    handler: src/update.handler
    events:
      - http:
          path: update
          method: PUT
          authorizer:
            name: authStudent
            resultTtlInSeconds: 0
          cors: true
  wishlistStudent:
    handler: src/wishlist.handler
    events:
      - http:
          path: wishlist
          method: PUT
          authorizer:
            name: authStudent
            resultTtlInSeconds: 0
          cors: true
  # uploadStudentFile:
  #   handler: src/uploadFile.handler
  #   events:
  #     - http:
  #         path: files/upload
  #         method: PUT
  #         authorizer:
  #           name: authStudent
  #           resultTtlInSeconds: 0
  #         cors: true
  # getStudentFile:
  #   handler: src/getFile.handler
  #   events:
  #     - http:
  #         path: files/get
  #         method: PUT
  #         authorizer:
  #           name: authStudent
  #           resultTtlInSeconds: 0
  #         cors: true

resources:
  - ${file(../../gateway-errors.yml)}
